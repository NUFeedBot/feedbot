#!/bin/python3

import os
from openai import OpenAI
import json
import argparse
import requests


DEFAULT_PROMPTS = {
    'data_design': 'Give feedback on the following code written in the Beginning'
        + ' Student Language Dialect of Racket in terms of its'
        + ' adherence to the Data Design Recipe from the textbook How to Design Programs:\n\n',
    'implementation': 'Give feedback on the following code written in the Beginning'
        + ' Student Language Dialect of Racket in terms of how well it follows'
        + ' the Design Recipe from the textbook How to Design Programs:\n\n',
    'list_abstraction': 'Give feedback on these Racket list abstractions:\n\n',
}


# Gets a response from OpenAI, given the OpenAI client, a prompt, and code
# (OpenAI, dict, int, str) -> str
def get_comment(client, config, problem_no, code):
    prompt = get_problem_prompt(config, problem_no)
    text = get_problem_text(code, problem_no)

    chat_completion = client.chat.completions.create(
        messages=[
            {
                "role": "user",
                "content": prompt + text,
            }
        ],
        model="gpt-4",
    )

    return chat_completion.choices[0].message.content


# Sends a POST request to the given URL, using the given list of comments
# (str (URL), List[Comment]) -> Response
def send_request(url, comments):
    addendum = 'entry'

    request_obj = {
        'code': text,
        'comments': json.dumps(
            {
                "comments": comments
            }
        ),
    }

    return requests.post(url + "/" + addendum, params=request_obj)


# Gets the text of the given problem from the code
# (str, int) -> str
def get_problem_text(code, problem_no):
    beginning = code.find(f";;- Begin problem {problem_no}")
    end = code.find(f";;- End problem {problem_no}")
    return code[beginning:end]


# Gets the prompt for the given problem_no in the config
# (dict, int) -> str
def get_problem_prompt(config, problem_no):
    prompts = config.get('prompts')
    problem = config.get('problems')[problem_no]
    return prompts.get(problem.get('problem_type'))


# Returns a correct configuration or prints error msg and quits
# dict -> dict
def normalize_config(config):
    ret = config.copy()
    ret.setdefault('prompts', DEFAULT_PROMPTS)
    return ret


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        prog='FeedBot autograder'
    )

    parser.add_argument('-l', '--local', action='store_true')
    parser.add_argument(
        '-u',
        '--url',
        default='https://feedbot-website-lively-firefly-3841.fly.dev/'
    )

    args = parser.parse_args()

    if args.local:
        with open('config.json', 'r') as conf:
            config = json.loads(conf.read())
    else:
        with open('source/config.json', 'r') as conf:
            config = json.loads(conf.read())

    config = normalize_config(config)

    if args.local:
        with open('test_src.rkt', 'r') as sub:
            text = sub.read()
    else:
        with open('submission/src.rkt', 'r') as sub:
            text = sub.read()

    if args.local:
        with open('key', 'r') as key:
            client = OpenAI(
                api_key=key.read().rstrip()
            )
    else:
        with open('source/key', 'r') as key:
            client = OpenAI(
                api_key=key.read().rstrip()
            )
    
    answer = get_comment(
        client,
        config,
        0,
        text
    )

    x = send_request(
        args.url,
        [
            {
                "line_number": 0,
                "text": answer
            }
        ]
    )

    output = {
        "score": 50.0,
        "tests": [
            {
                "output": x.text,
            },
        ],
    }

    if args.local:
        result_path = os.open('.', os.O_RDONLY)
    else:
        result_path = os.open('results', os.O_RDONLY)

    def opener(path, flags):
        return os.open(path, flags, dir_fd=result_path)

    with open('results.json', 'w', opener=opener) as f:
        print(json.dumps(output), file=f)

    os.close(result_path)
